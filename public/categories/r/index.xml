<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on R | Data science | Visualisation</title>
    <link>/categories/r/</link>
    <description>Recent content in R on R | Data science | Visualisation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Datasets in R</title>
      <link>/2018/06/09/datasets-in-r/</link>
      <pubDate>Sat, 09 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/06/09/datasets-in-r/</guid>
      <description>Quite often, I find myself creating dataframes to test if my functions work on different types of columns, or if their results are reasonable. Creating these “test cases” isn’t the most fun thing to do, it’s take up a lot of time and because I often just throw them away once I’m done, I have to recreate them next time. So, can I leverage a package to do this for us?</description>
    </item>
    
    <item>
      <title>R: from on.exit() to quasiquotation</title>
      <link>/2018/03/26/r-on-exit-and-sys-on-exit/</link>
      <pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/26/r-on-exit-and-sys-on-exit/</guid>
      <description>Part 1Often one needs to write functions that not only perform computation on its own, but also interact with the world outside of the function execution environment, for example, writing to a file, saving plots or changing working directory. Computer scientists called these operations side effects, in the sense that these functions change some aspects of the global state of the software. To be more precise, writing to a file requires a file connection to be established, saving plots requires opening a graphical device and changing working directories affects how to find things in the computer file system.</description>
    </item>
    
    <item>
      <title>R: Setting options</title>
      <link>/2018/01/07/setting-options-in-r/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/01/07/setting-options-in-r/</guid>
      <description>When developing a package or a set of functions, you often needs a lot of options. Often, you would want to set some sensible defaults for each option whilst giving users the flexibility to customize and extend. Take ggplot2 for example, if you ever used it, you know the background of the plots is, by default, grey, though You have the flexibility to change it.
While there are many ways to set options, I haven’t found a summary of pros and cons of different approaches and I certainly don’t know what best practices are.</description>
    </item>
    
  </channel>
</rss>